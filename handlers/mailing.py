from aiogram import types
from config import dp, bot, admins

from db_manager import DatabaseManager
from states.admin_states import DoMailingList

from keyboards.admin.admin_kb import choose_admin_kb, cancel_kb

import asyncio

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

base = DatabaseManager()

@dp.message_handler(Text(equals="üì¢–†–∞—Å—Å—ã–ª–∫–∞"), state=None, user_id=admins)
async def mailing_list(message: types.Message, state: FSMContext):
    edit_message_id = (await bot.send_message(message.from_user.id, "<strong>üì®–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º </strong>:\n\n<em>–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!</em>", reply_markup=cancel_kb))['message_id']
    await DoMailingList.get_text.set()
    async with state.proxy() as data:
        data['message_id'] = edit_message_id

@dp.message_handler(state=DoMailingList.get_text)
async def mailing_get_text(message: types.Message, state: FSMContext):
    edit_message_id = (await state.get_data()).get('message_id')
    async with state.proxy() as data:
        try:
            data['message'] = message.text
            await bot.edit_message_text(f"<strong>‚ùì–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ</strong>"
                                        f"<code> {len(await base.get_users_id())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</code>?", chat_id=message.from_user.id, message_id=edit_message_id, reply_markup=choose_admin_kb)
            await DoMailingList.next()
        except:
            await bot.edit_message_text("‚ùå<strong>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥</strong>\n\n"
                                        "<em>‚ùó–ù–∞ –≤–≤–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!</em>", chat_id=message.from_user.id, message_id=edit_message_id)
            await state.finish()

@dp.callback_query_handler(Text(startswith="choose_"), state=DoMailingList.get_choose)
async def mailing_process(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.split("_")[1] == "yes":
        await callback.message.edit_text("‚è≥ <strong>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å ...</strong>")
        users = await base.get_users_id()
        message = await state.get_data()
        recieved_users, problem_users = 0, 0
        for user in users:
            try:
                await bot.send_message(user[0], message['message'])
                recieved_users += 1
            except:
                problem_users += 1
            finally:
                await asyncio.sleep(0.3)
        await callback.message.edit_text(f"‚úâ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</b>\n\n"
                                         f"<strong>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç</strong>:\n"
                                         f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <code>{recieved_users}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚úîÔ∏è\n"
                                         f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <code>{problem_users}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚ùå")
    else:
        await callback.message.edit_text("‚úâ <strong>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå</strong>")
    await state.finish()
    await callback.answer()
