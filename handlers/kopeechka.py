from aiofiles import os
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from bs4 import BeautifulSoup

import requests

from config import dp, bot, kopeechka_token
from keyboards.admin.admin_kb import cancel_kb
from keyboards.client.main_keyboard import main_kb
from keyboards.client.kopeechka_kb import kopeechka_choose1, kopeechka_choose2
from states.client_states import GetEmailCode


@dp.message_handler(Text("ü§ñ–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å –ø–æ—á—Ç—ã"))
async def email_code_get_email(message: types.Message, state: FSMContext):
    await GetEmailCode.get_email.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=cancel_kb)


@dp.message_handler(state=GetEmailCode.get_email)
async def email_code_get_types(message: types.Message, state: FSMContext):
    await GetEmailCode.next()
    await message.answer("–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=kopeechka_choose1)
    async with state.proxy() as data:
        data['email'] = message.text


@dp.message_handler(state=GetEmailCode.get_type)
async def email_code_request_email(message: types.Message, state: FSMContext):
    await GetEmailCode.next()
    if message.text == "–¢–æ–ª—å–∫–æ –∫–æ–¥":
        async with state.proxy() as data:
            data['type'] = 'only_code'
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –≤ —Ñ–µ–π—Å–±—É–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'", reply_markup=kopeechka_choose2)
    elif message.text == "–ü–æ–ª–Ω–æ–µ –ø–∏—Å—å–º–æ":
        async with state.proxy() as data:
            data['type'] = 'full_msg'
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –≤ —Ñ–µ–π—Å–±—É–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'", reply_markup=kopeechka_choose2)
    elif message.text == "‚¨Ö–û—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_kb)
        await state.finish()


@dp.message_handler(state=GetEmailCode.code_sended)
async def email_code_request_email(message: types.Message, state: FSMContext):
    if message.text == "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω":
        async with state.proxy() as data:
            mail = data['email']
            msg_type = data['type']
        site = 'Facebook.com'
        subject = 'confirmation code'
        response1 = requests.get(
            f'http://api.kopeechka.store/mailbox-reorder?site={site}&email={mail}&token={kopeechka_token}&api=2.0')
        if response1.json()['status'] == 'ERROR':
            if response1.json()['value'] == 'NO_ACTIVATION':
                await message.answer('–ü–æ—á—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=main_kb)
                await state.finish()
            if response1.json()['value'] == 'SYSTEM_ERROR':
                await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É', reply_markup=main_kb)
                await state.finish()
        else:
            await message.answer("‚úÖ–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–∏—Å—å–º–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                                 reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                     InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
                                                          callback_data=f"email_code_check_{response1.json()['id']}_{msg_type}")))
            await state.finish()
    elif message.text == "‚¨Ö–û—Ç–º–µ–Ω–∞":
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_kb)
        await state.finish()

@dp.callback_query_handler(Text(startswith="email_code_check_"))
async def email_check_code(call: types.CallbackQuery):
    email_id = call.data.split("_")[3]
    msg_type = call.data.split("_")[4]
    response2 = requests.get(
        f'https://api.kopeechka.store/mailbox-get-message?full=1&spa=1&id={email_id}&token={kopeechka_token}')
    if response2.json()['status'] == 'ERROR':
        if response2.json()['value'] == 'NO_ACTIVATION':
            await call.message.answer("–ê–π–¥–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_kb)
            await call.message.delete()
        elif response2.json()['value'] == 'ACTIVATION_CANCELED':
            await call.message.answer("–ü–æ—á—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_kb)
            await call.message.delete()
        elif response2.json()['value'] == 'WAIT_LINK':
            await call.message.answer("–ü–∏—Å—å–º–æ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ!", reply_markup=main_kb)

    elif response2.json()['status'] == 'OK':
        if msg_type == 'only_code':
            soup = BeautifulSoup(response2.json()['fullmessage'], 'html.parser')
            temp1 = soup.find('td',
                              style='font-size:11px;font-family:LucidaGrande,tahoma,verdana,arial,sans-serif;padding:10px;background-color:#f2f2f2;border-left:none;border-right:none;border-top:none;border-bottom:none;')
            code = temp1.find('span').get_text()
            await call.message.answer(f"–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω!\n\n<strong>{code}</strong>")
            await call.message.delete()
        elif msg_type == 'full_msg':
            with open(f'products/{email_id}.html', "w") as f:
                f.write(response2.json()['fullmessage'])
            await bot.send_document(call.from_user.id, open(f'products/{email_id}.html', 'rb'), caption="–ü–∏—Å—å–º–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n–í–Ω—É—Ç—Ä–∏ HTML —Ñ–∞–π–ª–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∏—Å—å–º–∞", reply_markup=main_kb)
            await os.remove(f'products/{email_id}.html')
            await call.message.delete()
        await call.answer()
