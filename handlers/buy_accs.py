import random
from aiofiles import os

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types

from config import dp, bot, base, qiwi_p2p, log_chat_id

from states.client_states import BuyProduct
from keyboards.client.categories_keyboards import categories_kb, get_product_kb
from keyboards.admin.admin_kb import cancel_kb
from keyboards.client.payment_keyboards import get_payment_kb
from utils.get_product import get_product_sell_info


@dp.message_handler(Text(equals="üíº–ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã"))
async def get_categories_list(message: types.Message):
    await bot.send_message(message.from_user.id, "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:", reply_markup=categories_kb)


@dp.callback_query_handler(Text(startswith="category_"))
async def get_product_list(call: types.CallbackQuery):
    region = call.data.split("_")[1]
    await call.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=await get_product_kb(region))


@dp.callback_query_handler(Text(startswith="product_"))
async def buy_product_show_menu(callback: types.CallbackQuery, state: FSMContext):
    product_number = callback.data.split("_")[1]
    product_info = await base.get_product_info(product_number)
    await callback.message.delete()
    await BuyProduct.get_count.set()
    async with state.proxy() as data:
        data['message_id'] = (await callback.message.answer(f"<b>üà≥–¢–æ–≤–∞—Ä:</b> {product_info[2]}\n"
                                                            f"<b>üí∏–¶–µ–Ω–∞ –∑–∞ 1 —à—Ç—É–∫—É —Ç–æ–≤–∞—Ä–∞:</b> {product_info[3]}\n"
                                                            f"<b>üìô–í –Ω–∞–ª–∏—á–∏–∏:</b> {product_info[4]}\n\n"
                                                            f"<b>üìÉ–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n {product_info[5]}\n\n"
                                                            f"<em>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:</em>",
                                                            reply_markup=cancel_kb)).message_id
        data['product'] = product_number

    await callback.answer()

@dp.message_handler(state=BuyProduct.get_count)
async def get_count_of_product(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['count'] = int(message.text)
            sub_category_count = await base.get_count_of_product(data['product'])
            if not (0 < data['count'] <= sub_category_count):
                await bot.edit_message_text("<b>‚ùå–¢–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n"
                                            "<em>‚ùó–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–∫–∞–∑–∞–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–º–æ–º —Ç–æ–≤–∞—Ä–µ!</em>",
                                            message.from_user.id, data['message_id'])
                await message.delete()
                await state.finish()
                return
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                                 reply_markup=await get_payment_kb(data['product'], data['count']))
        await state.finish()
    except ValueError:
        async with state.proxy() as data:
            await bot.edit_message_text("<b>‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>",
                                        message.from_user.id, data['message_id'])
            await message.delete()
            await state.finish()


@dp.callback_query_handler(Text(startswith="buy_qiwi_"))
async def buy_product_operation(callback: types.CallbackQuery, state: FSMContext):
    try:
        await qiwi_p2p.reject(bill_id=new_bill.bill_id)
    except:
        pass
    count = callback.data.split("_")[3]
    product = callback.data.split("_")[2]
    random_chars_part = list("1234567890abcdefGHIGKLMNOPQRSTUVYXWZ")
    random.shuffle(random_chars_part)
    password_chars_part = "".join(
        [random.choice(random_chars_part) for x in range(10)])
    password_number_part = str(random.randint(100000000000, 999999999999))
    bill_id_result = password_number_part + password_chars_part
    product_info = await base.get_product_info(product)
    user_info = await base.get_detail_user_info(callback.from_user.id)
    userid = callback.from_user.id
    if await base.is_user_have_promo(userid):
        user_promo_text = await base.get_user_promo(userid)
        promo = await base.get_promo_info(user_promo_text)
        if promo[3] <= int(count) * int(product_info[3]):
            amount = (int(count) * int(product_info[3])) - int(((int(count) * int(product_info[3])) / 100) * user_info[4])
        else:
            amount = (int(count) * int(product_info[3]))
    else:
        amount = (int(count) * int(product_info[3]))
    new_bill = await qiwi_p2p.bill(bill_id=bill_id_result, amount=amount, lifetime=12)
    await callback.message.edit_text("‚ûñ‚ûñ‚ûñ‚ûñ–ß–µ–∫ –æ–ø–ª–∞—Ç—ã‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"<b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–∞—Å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.\n</b>"
                                     f"<b>–°—á—ë—Ç –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <code>12 –º–∏–Ω—É—Ç</code>. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–†–û–í–ï–†–ò–¢–¨ –û–ü–õ–ê–¢–£ </b>\n\n"
                                     f"üí∞–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: <code>{new_bill.amount}</code>\n"
                                     f"üìù–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{bill_id_result}</code>\n\n"
                                     f"<em>‚ùó–ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–µ –æ–ø–ª–∞—Ç—ã! –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à –ø–ª–∞—Ç—ë–∂ –º–æ–∂–µ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞—Ç—å—Å—è</em>",
                                     reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                         InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=new_bill.pay_url)).add(
                                         InlineKeyboardButton(text="üîé–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                                                              callback_data=f"check_bill_{bill_id_result}_{product}_{count}_{amount}")).add(
                                         InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                                                              callback_data=f"reject_bill_{bill_id_result}")))
    await callback.answer()


@dp.callback_query_handler(Text(startswith="check_bill_"))
async def check_qiwi_payment(callback: types.CallbackQuery):
    p2p_check = await qiwi_p2p.check(callback.data.split("_")[2])
    amount = callback.data.split("_")[5]
    count = callback.data.split("_")[4]
    product = callback.data.split("_")[3]
    userid = callback.from_user.id
    username = callback.from_user.username
    if p2p_check.status == 'PAID':
        try:
            await callback.message.delete()
            bill_id = callback.data.split("_")[2]
            if int(await base.get_referal(callback.from_user.id)) != 0:
                await base.referal_add(int(await base.get_referal(callback.from_user.id)), int((int(amount) / 100) * 10))
            await base.user_sell_mixin(userid)
            await callback.message.answer(f"<b>‚úÖ–û–ø–ª–∞—Ç–∞ —Å—á—ë—Ç–∞ <code>{bill_id}</code> –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</b>")
            sell_files = await get_product_sell_info(product, count, bill_id)
            await base.add_sell_to_logs(bill_id, userid, amount)
            await callback.message.answer_document(open(sell_files['excel'], 'rb'))
            await callback.message.answer_document(open(sell_files['txt'], 'rb'))
            await bot.send_message(log_chat_id, '–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\n'
                                                f'–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id}\n'
                                                f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {callback.data.split("_")[2]}\n'
                                                f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {amount}\n')
            await bot.send_document(log_chat_id, open(sell_files['excel'], 'rb'))
            await os.remove(sell_files['excel'])
            await os.remove(sell_files['txt'])
        except Exception as e:
            print(e)
            await callback.message.edit_text("–û—à–∏–±–∫–∞")
    elif p2p_check.status == 'WAITING':
        await callback.message.answer("‚ùå–°—á—ë—Ç –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω")
    elif p2p_check.status == 'REJECTED':
        await callback.message.answer("‚ùå–°—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    elif p2p_check.status == 'EXPIRED':
        await callback.message.answer("‚ùå–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—á—ë—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    await callback.answer()


@dp.callback_query_handler(Text(startswith="reject_bill_"))
async def buy_product_reject_qiwi_payment(callback: types.CallbackQuery):
    try:
        await qiwi_p2p.reject(callback.data.split("_")[2])
        await callback.message.answer("<b>‚ùå–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–º–µ–Ω—ë–Ω</b>")
    except:
        await callback.message.answer("<b>‚ùå–°—á—ë—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>")
    await callback.message.delete()
    await callback.answer()

@dp.callback_query_handler(Text(startswith="buy_balance_"))
async def buy_product_by_balance(call: types.CallbackQuery):
    product = call.data.split("_")[2]
    count = call.data.split("_")[3]
    userid = call.from_user.id
    random_chars_part = list("1234567890abcdefGHIGKLMNOPQRSTUVYXWZ")
    random.shuffle(random_chars_part)
    password_chars_part = "".join(
        [random.choice(random_chars_part) for x in range(10)])
    password_number_part = str(random.randint(100000000000, 999999999999))
    bill_id_result = password_number_part + password_chars_part
    product_info = await base.get_product_info(product)
    user_info = await base.get_detail_user_info(call.from_user.id)
    if await base.is_user_have_promo(userid):
        user_promo_text = await base.get_user_promo(userid)
        promo = await base.get_promo_info(user_promo_text)
        if promo[3] <= int(count) * int(product_info[3]):
            amount = (int(count) * int(product_info[3])) - int(((int(count) * int(product_info[3])) / 100) * user_info[4])
        else:
            amount = (int(count) * int(product_info[3]))
    else:
        amount = (int(count) * int(product_info[3]))
    balance = await base.get_user_balance(call.from_user.id)
    if balance < amount:
        await call.message.edit_text("‚≠ï–û—à–∏–±–∫–∞! \n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
        return
    try:
        await call.message.delete()
        bill_id = bill_id_result
        if int(await base.get_referal(call.from_user.id)) != 0:
            await base.referal_add(int(await base.get_referal(call.from_user.id)), int((int(amount) / 100) * 10))
        await base.user_sell_mixin(userid)
        await call.message.answer(f"<b>‚úÖ–û–ø–ª–∞—Ç–∞ —Å—á—ë—Ç–∞ <code>{bill_id}</code> –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</b>")
        sell_files = await get_product_sell_info(product, count, bill_id)
        await base.add_sell_to_logs(bill_id, userid, amount)
        await base.change_user_balance(balance - amount, call.from_user.id)
        await call.message.answer_document(open(sell_files['excel'], 'rb'))
        await call.message.answer_document(open(sell_files['txt'], 'rb'))
        await bot.send_message(log_chat_id, '–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\n'
                                            f'–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {call.from_user.id}\n'
                                            f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {bill_id_result}\n'
                                            f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {amount}\n')
        await bot.send_document(log_chat_id, open(sell_files['excel'], 'rb'))
        await os.remove(sell_files['excel'])
        await os.remove(sell_files['txt'])
    except Exception as e:
        print(e)
        await call.message.edit_text("–û—à–∏–±–∫–∞")


@dp.callback_query_handler(Text('back_category'))
async def get_back_to_categories(call: types.CallbackQuery):
    await call.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:", reply_markup=categories_kb)
