from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import base, dp, bot

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from states.client_states import InputPromo
from keyboards.client.user_profile_kb import get_profile_kb, get_profile_button, get_referal_keyboard
from keyboards.admin.admin_kb import cancel_kb

@dp.message_handler(Text("üë®‚Äçüíº–ü—Ä–æ—Ñ–∏–ª—å"))
async def user_profile(message: types.Message = None):
    user_stats = await base.get_detail_user_info(message.from_user.id)
    await message.answer("‚ûñ‚ûñ‚ûñ<b>üë§–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>‚ûñ‚ûñ‚ûñ\n"
                         f'üàπ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={str(user_stats[1])}">@{user_stats[0]}</a>\n'
                         f"üÜîID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{str(user_stats[1])}</code>\n"
                         f"üë®–ê–π–¥–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <code>{str(user_stats[2]) if user_stats[2] != 0 else '–ù–µ—Ç'}</code>\n"
                         f"üí∏–°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: <code>{user_stats[3]}</code> —Ä—É–±–ª–µ–π\n"
                         f"üí∏–ë–∞–ª–∞–Ω—Å: <code>{str(user_stats[5])}</code> —Ä—É–±–ª–µ–π\n" 
                         f"üíØ–°–∫–∏–¥–∫–∞: <code>{str(user_stats[4])}</code> %\n"
                         f"üõí–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: <code>{str(user_stats[6])}</code>\n", reply_markup=await get_profile_kb(message.from_user.id))

@dp.callback_query_handler(Text(startswith="get_profile_"))
async def user_profile(call: types.CallbackQuery):
    user_stats = await base.get_detail_user_info(call.from_user.id)
    await call.message.edit_text("‚ûñ‚ûñ‚ûñ<b>üë§–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>‚ûñ‚ûñ‚ûñ\n"
                                 f'üàπ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={str(user_stats[1])}">@{user_stats[0]}</a>\n'
                                 f"üÜîID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{str(user_stats[1])}</code>\n"
                                 f"üë®–ê–π–¥–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <code>{str(user_stats[2]) if user_stats[2] != 0 else '–ù–µ—Ç'}</code>\n"
                                 f"üí∏–°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: <code>{user_stats[3]}</code> —Ä—É–±–ª–µ–π\n"
                                 f"üí∏–ë–∞–ª–∞–Ω—Å: <code>{str(user_stats[5])}</code> —Ä—É–±–ª–µ–π\n"
                                 f"üíØ–°–∫–∏–¥–∫–∞: <code>{str(user_stats[4])}</code> %\n"
                                 f"üõí–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: <code>{str(user_stats[6])}</code>\n", reply_markup=await get_profile_kb(call.from_user.id))

@dp.callback_query_handler(Text(startswith="get_rules_"))
async def get_rules(call: types.CallbackQuery):
    await call.message.edit_text(await base.get_command_text('rules'),
                                 reply_markup=await get_profile_button(call.from_user.id))

@dp.callback_query_handler(Text(startswith="profile_altpayment_"))
async def get_rules(call: types.CallbackQuery):
    await call.message.edit_text(await base.get_command_text('altpayment'),
                                 reply_markup=await get_profile_button(call.from_user.id))

@dp.callback_query_handler(Text(startswith="profile_ref_"))
async def get_user_ref(call: types.CallbackQuery):
    await call.message.edit_text(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!\n\n"
                                 f"<strong>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å</strong>!\n\n"
                                 f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <strong>10%</strong> –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ\n\n"
                                 f"<strong>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</strong>: https://t.me/FBshop2020_bot?start={call.from_user.id}",
                                 reply_markup=await get_referal_keyboard(call.from_user.id))

@dp.callback_query_handler(Text(startswith="profile_promo_activate_"))
async def activate_promo(call: types.CallbackQuery, state: FSMContext):
    await InputPromo.get_text.set()
    await call.message.edit_text("üìÑ–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=cancel_kb)
    async with state.proxy() as data:
        data['message_id'] = call.message.message_id

@dp.message_handler(state=InputPromo.get_text)
async def get_promo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            promo_info = await base.get_promo_info(message.text)
            if promo_info[2] != 0:
                if await base.is_promo_used(message.from_user.id, message.text):
                    await bot.edit_message_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: –≤—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!",
                                                chat_id=message.from_user.id, message_id=data['message_id'])
                    await state.finish()
                    return
                if await base.is_user_have_promo(message.from_user.id):
                    await bot.edit_message_text(
                        "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!",
                        chat_id=message.from_user.id, message_id=data['message_id'])
                    await state.finish()
                    return
                await base.activate_promo(message.from_user.id, promo_info[0], promo_info[1])
                await bot.edit_message_text("üíØ–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", chat_id=message.from_user.id, message_id=data['message_id'])
            else:
                await bot.edit_message_text(
                    "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤!",
                    chat_id=message.from_user.id, message_id=data['message_id'])
        except:
            await bot.edit_message_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                        chat_id=message.from_user.id, message_id=data['message_id'])
        finally:
            await state.finish()

@dp.callback_query_handler(Text(startswith="get_referals_"))
async def get_referals(call: types.CallbackQuery):
    userid = call.data.split("_")[2]
    referals = await base.get_referals_stats(userid)
    msg = "üì¶–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for referal in referals:
        msg += f'<a href="tg://user?id={str(referal[0])}">@{referal[1]}</a>\n'
    await call.message.edit_text(msg,
                                 reply_markup=InlineKeyboardMarkup(row_width=1)
                                 .add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                           callback_data=f"profile_ref_{userid}")))

@dp.callback_query_handler(Text(startswith="profile_history_"))
async def get_user_history(call: types.CallbackQuery):
    userid = call.data.split("_")[2]
    orders = await base.get_user_order_history(userid)
    msg = "<strong>üí∞–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫</strong>:\n\n" \
          "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ | –¶–µ–Ω–∞\n\n"
    for order in orders:
        msg += f'{order[2]} | {order[1]} —Ä—É–±–ª–µ–π\n '
    await call.message.edit_text(msg,
                                 reply_markup=InlineKeyboardMarkup(row_width=1)
                                 .add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                           callback_data=f"get_profile_{userid}")))
